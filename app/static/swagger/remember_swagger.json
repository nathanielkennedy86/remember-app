{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Remember REST APIs",
        "description": "A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification",
        "termsOfService": "http://helloreverb.com/terms/",
        "contact": {
            "name": "Swagger API team",
            "email": "foo@example.com",
            "url": "http://swagger.io"
        },
        "license": {
            "name": "MIT",
            "url": "http://opensource.org/licenses/MIT"
        }
    },
    "host": "localhost:5000",
    "basePath": "/remember/api/v1.0",
    "tags": [
        {
            "name": "task",
            "description": "CRUD operations for task"
        },
        {
            "name": "category",
            "description": "CRUD operations for category"
        }
    ],
    "schemes": [
        "http"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/tasks": {
            "get": {
                "tags": [
                    "task"
                ],
                "description": "Returns all tasks that the user has access to",
                "operationId": "findTasks",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "task response",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/task"
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/errorModel"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "task"
                ],
                "description": "Creates a new task (Duplicates are allowed)",
                "operationId": "addTask",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "task-body",
                        "in": "body",
                        "description": "task needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/newTask"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "task response",
                        "schema": {
                            "$ref": "#/definitions/task"
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/errorModel"
                        }
                    }
                }
            }
        },
        "/tasks/{id}": {
            "get": {
                "tags": [
                    "task"
                ],
                "description": "Get a task with task ID, if the user does not have access to the pet",
                "operationId": "findTaskById",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of task to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "task response",
                        "schema": {
                            "$ref": "#/definitions/task"
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/errorModel"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "task"
                ],
                "description": "update task with task ID",
                "operationId": "updateTaskById",
                "produces": [
                    "application/json",
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of task to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "task-body",
                        "in": "body",
                        "description": "task needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "task response",
                        "schema": {
                            "$ref": "#/definitions/task"
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/errorModel"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "task"
                ],
                "description": "Delete a task with task ID",
                "operationId": "deleteTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of task to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "task deleted"
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/errorModel"
                        }
                    }
                }
            }
        },
        "/tasks/find-by-status": {
            "get": {
                "tags": [
                    "task"
                ],
                "summary": "Find tasks by status",
                "description": "the 'done' status of the task could be true or false",
                "operationId": "findTasksByStatus",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "done",
                        "in": "query",
                        "description": "Status value that need to be considered for filter",
                        "required": true,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/task"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/tasks/find-by-category": {
            "get": {
                "tags": [
                    "task"
                ],
                "summary": "Find tasks by category",
                "description": "Find tasks by category",
                "operationId": "findTasksByCategory",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "Status value that need to be considered for filter",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/task"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        
        "/categories": {
            "get": {
                "tags": [
                    "category"
                ],
                "description": "Returns all categories that the user has access to",
                "operationId": "findCategories",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "category response",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/category"
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/errorModel"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "category"
                ],
                "description": "Creates a new category (Duplicates are allowed)",
                "operationId": "addCategory",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "category-body",
                        "in": "body",
                        "description": "category needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/newCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "category response",
                        "schema": {
                            "$ref": "#/definitions/category"
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/errorModel"
                        }
                    }
                }
            }
        },
        "/categories/{id}": {
            "get": {
                "tags": [
                    "category"
                ],
                "description": "Get a category with category ID, if the user does not have access to the pet",
                "operationId": "findCategoryById",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of category to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "category response",
                        "schema": {
                            "$ref": "#/definitions/category"
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/errorModel"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "category"
                ],
                "description": "update category with category ID",
                "operationId": "updateCategoryById",
                "produces": [
                    "application/json",
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of category to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "category-body",
                        "in": "body",
                        "description": "category needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "category response",
                        "schema": {
                            "$ref": "#/definitions/category"
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/errorModel"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "category"
                ],
                "description": "Delete a category with category ID",
                "operationId": "deleteTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of category to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "category deleted"
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/errorModel"
                        }
                    }
                }
            }
        },
    },
    "definitions": {
        "task": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "done": {
                    "type": "boolean"
                },
                "category_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "newTask": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "done": {
                    "type": "boolean"
                },
                "category": {
                    "$ref": "#/definitions/category"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tag"
                    }
                }
            }
        },
        "category": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "newCategory": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "tag": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "errorModel": {
            "type": "object",
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}